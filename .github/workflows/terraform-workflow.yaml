name: Terraform Reusable Workflow

on:
  workflow_call:
    inputs:
      import_enabled:
        description: 'Enable terraform import step'
        required: false
        type: boolean
        default: false
      action:
        description: 'Terraform action to perform (apply or destroy)'
        required: true
        type: string
      environment:
        description: 'Environment name (platform, corp, online)'
        required: true
        type: string
      tf_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: 'latest'
    secrets:
      ARM_CLIENT_ID: { required: true }
      ARM_CLIENT_SECRET: { required: true }
      ARM_BACKEND_CLIENT_ID: { required: true }
      ARM_BACKEND_CLIENT_SECRET: { required: true }
      GIT_TOKEN: { required: false }
    

jobs:
  terraform:
    name: 'Terraform ${{ inputs.action }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: landing_zones/${{ inputs.environment }}
    
    env:
      # Deployment SPN
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      
      # Backend SPN (for terraform backend)
      ARM_BACKEND_CLIENT_ID: ${{ secrets.ARM_BACKEND_CLIENT_ID }}
      ARM_BACKEND_CLIENT_SECRET: ${{ secrets.ARM_BACKEND_CLIENT_SECRET }}}

    steps:
      - name: Cleanup Terraform Files
        if: always()
        run: |
          rm -f tfplan terraform.tfstate.backup
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.d
          find . -type d -name "*.tf" -exec rm -rf {} +
          echo "Cleanup completed"
        continue-on-error: true

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: false

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_BACKEND_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_BACKEND_CLIENT_SECRET }}
        run: terraform init -input=false -lock=true -upgrade=true

      - name: Terraform Validate
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: terraform validate

      - name: Terraform Import (Conditional)
        if: ${{ inputs.import_enabled == true }}
        run: |
          echo "Running terraform import if needed..."
          # Add your import commands here
          # terraform import <resource_type.resource_name> <resource_id>

      - name: Terraform Plan
        id: plan
        run: |
          if [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "Running terraform plan -destroy"
            terraform plan -destroy -out=tfplan -input=false
          else
            echo "Running terraform plan"
            terraform plan -out=tfplan -input=false
          fi

      - name: Manual Approval for ${{ inputs.action }}
        if: github.event_name == 'workflow_call' && (inputs.action == 'apply' || inputs.action == 'destroy')
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN || github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Manual approval for ${{ inputs.action }} in ${{ inputs.environment }}"
          issue-body: |
            **Environment**: ${{ inputs.environment }}
            **Action**: ${{ inputs.action }}
            **Triggered by**: @${{ github.actor }}
            
            Please review the terraform plan and approve to continue.

      - name: Terraform ${{ inputs.action }}
        run: |
          terraform apply -auto-approve tfplan || exit_code=$?
          
          # Handle ResourceGroupNotFound error gracefully for destroy operations
          if [[ "${{ inputs.action }}" == "destroy" && $exit_code -ne 0 ]]; then
            if terraform show 2>&1 | grep -q "ResourceGroupNotFound\|could not be found"; then
              echo "Resource group already deleted, considering destroy successful."
              exit 0
            else
              exit $exit_code
            fi
          fi
          
          exit ${exit_code:-0}

      - name: Cleanup Terraform Files
        if: always()
        run: |
          rm -f tfplan terraform.tfstate.backup
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.d
          find . -type d -name "*.tf" -exec rm -rf {} +
          echo "Cleanup completed"
